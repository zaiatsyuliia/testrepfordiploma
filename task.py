# task.py - –û–∫—Ä–µ–º–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
"""
–ó–∞–¥–∞—á–∞: –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —á–∏—Å–ª–∞–º–∏ —Ç–∞ —ó—Ö —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
"""

def factorial(n):
    """–û–±—á–∏—Å–ª—é—î —Ñ–∞–∫—Ç–æ—Ä—ñ–∞–ª —á–∏—Å–ª–∞ n"""
    if n < 0:
        raise ValueError("–§–∞–∫—Ç–æ—Ä—ñ–∞–ª –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –≤—ñ–¥'—î–º–Ω–∏—Ö —á–∏—Å–µ–ª")
    if n == 0 or n == 1:
        return 1
    return n * factorial(n - 1)

def fibonacci(n):
    """–ü–æ–≤–µ—Ä—Ç–∞—î n-—Ç–µ —á–∏—Å–ª–æ –§—ñ–±–æ–Ω–∞—á—á—ñ"""
    if n < 0:
        raise ValueError("n –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –Ω–µ–≤—ñ–¥'—î–º–Ω–∏–º")
    if n == 0:
        return 0
    if n == 1:
        return 1
    
    a, b = 0, 1
    for _ in range(2, n + 1):
        a, b = b, a + b
    return b

def is_prime(n):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î —á–∏—Å–ª–æ n –ø—Ä–æ—Å—Ç–∏–º"""
    if n < 2:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    
    for i in range(3, int(n**0.5) + 1, 2):
        if n % i == 0:
            return False
    return True

def gcd(a, b):
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–±—ñ–ª—å—à–∏–π —Å–ø—ñ–ª—å–Ω–∏–π –¥—ñ–ª—å–Ω–∏–∫ –¥–≤–æ—Ö —á–∏—Å–µ–ª"""
    while b:
        a, b = b, a % b
    return abs(a)

def lcm(a, b):
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–º–µ–Ω—à–µ —Å–ø—ñ–ª—å–Ω–µ –∫—Ä–∞—Ç–Ω–µ –¥–≤–æ—Ö —á–∏—Å–µ–ª"""
    return abs(a * b) // gcd(a, b)

def prime_factors(n):
    """–†–æ–∑–∫–ª–∞–¥–∞—î —á–∏—Å–ª–æ –Ω–∞ –ø—Ä–æ—Å—Ç—ñ –º–Ω–æ–∂–Ω–∏–∫–∏"""
    if n <= 1:
        return []
    
    factors = []
    d = 2
    while d * d <= n:
        while n % d == 0:
            factors.append(d)
            n //= d
        d += 1
    if n > 1:
        factors.append(n)
    return factors

def test_functions():
    """–¢–µ—Å—Ç—É—î –≤—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó"""
    print("üßÆ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π\n")
    
    # –¢–µ—Å—Ç —Ñ–∞–∫—Ç–æ—Ä—ñ–∞–ª–∞
    print("üìä –§–∞–∫—Ç–æ—Ä—ñ–∞–ª:")
    test_values = [0, 1, 5, 7]
    for val in test_values:
        print(f"  {val}! = {factorial(val)}")
    
    # –¢–µ—Å—Ç –§—ñ–±–æ–Ω–∞—á—á—ñ
    print("\nüî¢ –ß–∏—Å–ª–∞ –§—ñ–±–æ–Ω–∞—á—á—ñ:")
    for i in range(10):
        print(f"  F({i}) = {fibonacci(i)}")
    
    # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–∏—Ö —á–∏—Å–µ–ª
    print("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ—Å—Ç–∏—Ö —á–∏—Å–µ–ª:")
    test_numbers = [2, 3, 4, 17, 25, 29, 100]
    for num in test_numbers:
        result = "–ø—Ä–æ—Å—Ç–µ" if is_prime(num) else "—Å–∫–ª–∞–¥–µ–Ω–µ"
        print(f"  {num} - {result}")
    
    # –¢–µ—Å—Ç –ù–°–î —Ç–∞ –ù–°–ö
    print("\n‚ûó –ù–°–î —Ç–∞ –ù–°–ö:")
    pairs = [(12, 18), (15, 25), (7, 13)]
    for a, b in pairs:
        print(f"  –ù–°–î({a}, {b}) = {gcd(a, b)}")
        print(f"  –ù–°–ö({a}, {b}) = {lcm(a, b)}")
    
    # –¢–µ—Å—Ç —Ä–æ–∑–∫–ª–∞–¥—É –Ω–∞ –ø—Ä–æ—Å—Ç—ñ –º–Ω–æ–∂–Ω–∏–∫–∏
    print("\nüî® –†–æ–∑–∫–ª–∞–¥ –Ω–∞ –ø—Ä–æ—Å—Ç—ñ –º–Ω–æ–∂–Ω–∏–∫–∏:")
    numbers = [12, 60, 97, 100]
    for num in numbers:
        factors = prime_factors(num)
        print(f"  {num} = {' √ó '.join(map(str, factors))}")

def interactive_mode():
    """–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π"""
    print("\nüéÆ –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º")
    print("–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:")
    print("1 - –§–∞–∫—Ç–æ—Ä—ñ–∞–ª")
    print("2 - –§—ñ–±–æ–Ω–∞—á—á—ñ") 
    print("3 - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Å—Ç–µ —á–∏—Å–ª–æ")
    print("4 - –ù–°–î –¥–≤–æ—Ö —á–∏—Å–µ–ª")
    print("5 - –ù–°–ö –¥–≤–æ—Ö —á–∏—Å–µ–ª")
    print("6 - –†–æ–∑–∫–ª–∞–¥ –Ω–∞ –ø—Ä–æ—Å—Ç—ñ –º–Ω–æ–∂–Ω–∏–∫–∏")
    print("0 - –í–∏—Ö—ñ–¥")
    
    while True:
        try:
            choice = input("\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥–∏: ").strip()
            
            if choice == '0':
                print("–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è! üëã")
                break
            elif choice == '1':
                n = int(input("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –¥–ª—è —Ñ–∞–∫—Ç–æ—Ä—ñ–∞–ª–∞: "))
                print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {factorial(n)}")
            elif choice == '2':
                n = int(input("–í–≤–µ–¥—ñ—Ç—å –ø–æ–∑–∏—Ü—ñ—é —á–∏—Å–ª–∞ –§—ñ–±–æ–Ω–∞—á—á—ñ: "))
                print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {fibonacci(n)}")
            elif choice == '3':
                n = int(input("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: "))
                result = "–ø—Ä–æ—Å—Ç–µ" if is_prime(n) else "—Å–∫–ª–∞–¥–µ–Ω–µ"
                print(f"–ß–∏—Å–ª–æ {n} - {result}")
            elif choice == '4':
                a = int(input("–í–≤–µ–¥—ñ—Ç—å –ø–µ—Ä—à–µ —á–∏—Å–ª–æ: "))
                b = int(input("–í–≤–µ–¥—ñ—Ç—å –¥—Ä—É–≥–µ —á–∏—Å–ª–æ: "))
                print(f"–ù–°–î({a}, {b}) = {gcd(a, b)}")
            elif choice == '5':
                a = int(input("–í–≤–µ–¥—ñ—Ç—å –ø–µ—Ä—à–µ —á–∏—Å–ª–æ: "))
                b = int(input("–í–≤–µ–¥—ñ—Ç—å –¥—Ä—É–≥–µ —á–∏—Å–ª–æ: "))
                print(f"–ù–°–ö({a}, {b}) = {lcm(a, b)}")
            elif choice == '6':
                n = int(input("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –¥–ª—è —Ä–æ–∑–∫–ª–∞–¥—É: "))
                factors = prime_factors(n)
                print(f"{n} = {' √ó '.join(map(str, factors))}")
            else:
                print("–ù–µ–≤—ñ—Ä–Ω–∞ –∫–æ–º–∞–Ω–¥–∞! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                
        except ValueError as e:
            print(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        except Exception as e:
            print(f"–ù–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

if __name__ == "__main__":
    print("=" * 50)
    print("üìö –ú–ê–¢–ï–ú–ê–¢–ò–ß–ù–Ü –§–£–ù–ö–¶–Ü–á - –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
    test_functions()
    
    # –ó–∞–ø—É—Å–∫ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
    interactive_mode()